(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{388:function(e,t,a){"use strict";a.r(t);var o=a(51),s=Object(o.a)({},(function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"mathematics-in-javascript"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#mathematics-in-javascript"}},[e._v("#")]),e._v(" Mathematics in JavaScript")]),e._v(" "),a("h2",{attrs:{id:"everybody-loves-math"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#everybody-loves-math"}},[e._v("#")]),e._v(" Everybody loves math")]),e._v(" "),a("p",[e._v("Okay, maybe not. But none of us can deny that math is a fundamental part of life and IT-sphere in particular. This is especially true when we are learning to program JavaScript (or any other language) — so much of what we do relies on processing numerical data, calculating new values, and so on, that you won't be surprised to learn that JavaScript has a full-featured set of math functions available.")]),e._v(" "),a("p",[e._v("This article discusses only the basic parts on the level of 11-th school (lyceum or gimnasium) grade.")]),e._v(" "),a("h2",{attrs:{id:"types-of-numbers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#types-of-numbers"}},[e._v("#")]),e._v(" Types of numbers")]),e._v(" "),a("p",[e._v("In programming we use different terms to describe different types of decimal numbers, for example:")]),e._v(" "),a("ul",[a("li",[e._v("Integers are floating-point numbers without a fraction. They can either be positive or negative, e.g. "),a("code",[e._v("10")]),e._v(", "),a("code",[e._v("400")]),e._v(", or "),a("code",[e._v("-5")]),e._v(".")]),e._v(" "),a("li",[e._v("Floating point numbers (floats) have decimal points and decimal places, for example "),a("code",[e._v("12.5")]),e._v(", and "),a("code",[e._v("56.7786543")]),e._v(".")]),e._v(" "),a("li",[e._v("Doubles are a specific type of floating point number that have greater precision than standard floating point numbers (meaning that they are accurate to a greater number of decimal places).")])]),e._v(" "),a("p",[e._v("We even have different types of number systems! Usually, when we write a number, "),a("code",[e._v("1011")]),e._v(", we don't specify the base. But we can do this both in real life ("),a("code",[e._v("1011")]),e._v("₂) and in "),a("s",[e._v("fantasy life")]),e._v(" programming ("),a("code",[e._v("0b1011")]),e._v("). Decimal is base 10 (meaning it uses 0–9 in each column), but we also have things like:")]),e._v(" "),a("ul",[a("li",[e._v("Binary — The lowest level language of computers; 0s and 1s. Example: "),a("code",[e._v("0b1101")])]),e._v(" "),a("li",[e._v("Octal — Base 8, uses 0–7 in each column. Example: "),a("code",[e._v("0o27")])]),e._v(" "),a("li",[e._v("Hexadecimal — Base 16, uses 0–9 and then a–f in each column. You may have encountered these numbers before when setting colors. Example: "),a("code",[e._v("0xff")])])]),e._v(" "),a("p",[e._v("And, of course, due to some things there are some unexpected values. For example, if user inputs not a number in a prompt form. But we want to use this value as a number. Yes, it's "),a("code",[e._v("NaN")]),e._v(" in JS.")]),e._v(" "),a("blockquote",[a("h3",{attrs:{id:"off-topic-1"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#off-topic-1"}},[e._v("#")]),e._v(" "),a("em",[e._v("Off topic 1")])]),e._v(" "),a("p",[e._v("You can also use exponential notation to write some big numbers, and this number will automatically be converted to a usual number. Like "),a("code",[e._v("2.4e3 + 5")]),e._v(" equals "),a("code",[e._v("2405")])])]),e._v(" "),a("math-number-variations"),e._v(" "),a("p",[e._v("Well, "),a("em",[e._v("phew")]),e._v(", we have discussed numbers! Wait, is a number this string: "),a("code",[e._v("'123'")]),e._v("?..")]),e._v(" "),a("h2",{attrs:{id:"parsing-and-type-conversions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#parsing-and-type-conversions"}},[e._v("#")]),e._v(" Parsing and type conversions")]),e._v(" "),a("blockquote",[a("h3",{attrs:{id:"jokes-are-good-aren-t-they"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#jokes-are-good-aren-t-they"}},[e._v("#")]),e._v(" Jokes are good, aren't they?")])]),e._v(" "),a("blockquote",[a("p",[e._v("This is one of the most valuable topics in JS. It produces so many jokes. "),a("em",[e._v("A lot of jokes")]),e._v(". "),a("strong",[a("em",[e._v("TELL ME ONCE AGAIN ABOUT "),a("code",[e._v("'1' + 1")])])])]),e._v(" "),a("h3",{attrs:{id:"c-herman-mossur"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-herman-mossur"}},[e._v("#")]),e._v(" (c) Herman Mossur")])]),e._v(" "),a("p",[e._v("Yes, JS has very "),a("em",[e._v("interesting")]),e._v(" conversions that you will use. Sometimes you might end up with a number that is stored as a string type, which makes it difficult to perform calculations with it. This most commonly happens when data is entered into a form input, and the input type is text. There is a way to solve this problem — passing the string value into the Number() constructor to return a number version of the same value.")]),e._v(" "),a("p",[e._v("For example, try typing these lines into your console: "),a("code",[e._v("let myNumber = '74'; myNumber + 3;")])]),e._v(" "),a("p",[e._v("You end up with the result 743, not 77, because myNumber is actually defined as a string. You can test this by typing in the following: "),a("code",[e._v("typeof myNumber;")])]),e._v(" "),a("p",[e._v("To fix the calculation, you can do this: "),a("code",[e._v("Number(myNumber) + 3;")]),e._v(". Or this: "),a("code",[e._v("+myNumber + 3")]),e._v(". The last way is more preffered due to it's size. "),a("em",[e._v("Developers are such lazy people.")])]),e._v(" "),a("math-number-conversion"),e._v(" "),a("blockquote",[a("h3",{attrs:{id:"off-topic-1-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#off-topic-1-2"}},[e._v("#")]),e._v(" "),a("em",[e._v("Off topic 1")])]),e._v(" "),a("p",[e._v("The last way uses "),a("code",[e._v("+")]),e._v(" sign not as binary operator ("),a("em",[e._v("that uses two values")]),e._v("), but as unary operator ("),a("em",[e._v("that uses one value")]),e._v(").")])]),e._v(" "),a("blockquote",[a("h3",{attrs:{id:"off-topic-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#off-topic-2"}},[e._v("#")]),e._v(" "),a("em",[e._v("Off topic 2")])]),e._v(" "),a("p",[e._v("You can also do "),a("em",[e._v("vice versa")]),e._v(": convert number to string just by using "),a("code",[e._v("String(123)")]),e._v(" or "),a("code",[e._v("'' + 123")]),e._v(" (or "),a("code",[e._v("123 + ''")]),e._v(").")])]),e._v(" "),a("h2",{attrs:{id:"constants"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#constants"}},[e._v("#")]),e._v(" Constants")]),e._v(" "),a("p",[e._v("There are some numbers, that are used literally everywhere. They are called "),a("strong",[e._v("constants")]),e._v(". They are: "),a("em",[a("code",[e._v("π, e, √2, √(1/2)")])]),e._v("... They are also present in Math module. Use can use it without any imports - just type "),a("code",[e._v("Math.")]),e._v(" in console! For example, to count an area of a circle with radius "),a("code",[e._v("r")]),e._v(", you just need to type "),a("code",[e._v("Math.PI * r * r")]),e._v(". Or, you can use the "),a("code",[e._v("Math.pow(base, exponent)")]),e._v(" function.")]),e._v(" "),a("math-number-constants"),e._v(" "),a("h2",{attrs:{id:"power"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#power"}},[e._v("#")]),e._v(" Power")]),e._v(" "),a("blockquote",[a("h3",{attrs:{id:"misunderstandings"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#misunderstandings"}},[e._v("#")]),e._v(" Misunderstandings")])]),e._v(" "),a("blockquote",[a("p",[e._v("To achieve total power over world, you need to summon the "),a("em",[e._v("Godzilla")])]),e._v(" "),a("h3",{attrs:{id:"c-herman-mossur-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#c-herman-mossur-2"}},[e._v("#")]),e._v(" (c) Herman Mossur")])]),e._v(" "),a("p",[e._v("A power, or a "),a("em",[e._v("exponentiation")]),e._v(", is a repeated multiplication. "),a("code",[e._v("5")]),e._v("³ = "),a("code",[e._v("5 * 5 * 5")]),e._v(", where 5 is a "),a("em",[e._v("base")]),e._v(" and 3 is an "),a("em",[e._v("exponent")]),e._v(".")]),e._v(" "),a("p",[e._v("So, the function "),a("code",[e._v("Math.pow(b, e)")]),e._v(" is an easy way to perform this operation. It's first parameter "),a("code",[e._v("b")]),e._v(" can be any number, second - "),a("code",[e._v("e")]),e._v(" - also any number.")]),e._v(" "),a("p",[e._v("Yes, you might remember that "),a("em",[a("code",[e._v("√n")])]),e._v(" can also be written as "),a("em",[a("code",[e._v("n")]),e._v("½")]),e._v(". So, to achieve root you can use "),a("code",[e._v("Math.sqrt")]),e._v(" and "),a("code",[e._v("Math.cbrt")]),e._v(" or just use "),a("code",[e._v("Math.pow(x, y)")]),e._v(", where y lies between 0 and 1.")]),e._v(" "),a("p",[e._v("You can also use negative value of y instead of writting "),a("code",[e._v("1 / Math.pow(x, y)")]),e._v(". It is equal to "),a("code",[e._v("Math.pow(x, -y)")]),e._v(". Of course, you need to remember that negative numbers don't have a real square (or any even) root, so "),a("code",[e._v("Math.pow(-7, 0.5)")]),e._v(" produces a "),a("code",[e._v("NaN")]),e._v(" value.")]),e._v(" "),a("p",[e._v("The very separate example is exponential. You can use "),a("code",[e._v("Math.pow(e, x)")]),e._v(" or "),a("code",[e._v("Math.exp(x)")]),e._v(" for that purpose.")]),e._v(" "),a("math-power"),e._v(" "),a("blockquote",[a("h3",{attrs:{id:"little-hint"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#little-hint"}},[e._v("#")]),e._v(" "),a("em",[e._v("Little hint")])]),e._v(" "),a("p",[e._v("You can also use operator "),a("code",[e._v("**")]),e._v(" to achive the same result as "),a("code",[e._v("Math.pow(x, y)")]),e._v(". Just "),a("code",[e._v("5 ** 3")]),e._v(". Easy. And "),a("em",[e._v("lazy")]),e._v(".")])]),e._v(" "),a("p",[a("strong",[a("em",[e._v("But beware!")])]),e._v(" Whilst computing not integer numbers you can meet strange values like "),a("code",[e._v("0.1 + 0.2 = 0.30000000000000004")]),e._v(". I can highly recommend you using some rounding functions to get really expected answer like "),a("code",[e._v("0.3")]),e._v(".")]),e._v(" "),a("h2",{attrs:{id:"rounding-functions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#rounding-functions"}},[e._v("#")]),e._v(" Rounding functions")]),e._v(" "),a("p",[e._v("Main purpose of rounding function is to return a value with fixed signs after dot. Actually, there are several rounding functions:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Math.floor(x)")]),e._v(" always returns the low integer bound of x")]),e._v(" "),a("li",[a("code",[e._v("Math.round(x)")]),e._v(" returns a low bound or a high bound depending on what is 'closer' to original x")]),e._v(" "),a("li",[a("code",[e._v("Math.ceil(x)")]),e._v(" always returns the high integer bound of x")]),e._v(" "),a("li",[a("code",[e._v("Number.toFixed(x)")]),e._v(" uses round function and cuts a number to x signs after dot.")])]),e._v(" "),a("math-round"),e._v(" "),a("h2",{attrs:{id:"absolute-value"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#absolute-value"}},[e._v("#")]),e._v(" Absolute value")]),e._v(" "),a("p",[e._v("To be honest, it's not very necessary to know, which function returns the absolute value, because this function is easy-to-write in 1 minute. You need just to invert the value of number, if it's negative. But it becomes only 10 seconds if you're using "),a("code",[e._v("Math.abs(x)")]),e._v(".")]),e._v(" "),a("math-absolute"),e._v(" "),a("h2",{attrs:{id:"logarithms"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#logarithms"}},[e._v("#")]),e._v(" Logarithms")]),e._v(" "),a("p",[e._v("Do you still remember the content of the "),a("strong",[e._v("Constants")]),e._v(" chapter? Well, sometimes you're gonna need something more than just "),a("code",[e._v("Math.LN2")]),e._v(", "),a("code",[e._v("Math.LN10")]),e._v(", "),a("code",[e._v("Math.LOG2E")]),e._v(" or "),a("code",[e._v("Math.LOG10E")]),e._v(".")]),e._v(" "),a("p",[e._v("This is the time when "),a("code",[e._v("Math.log(x)")]),e._v(" (which is a natural log <=> ln(x)), "),a("code",[e._v("Math.log2(x)")]),e._v(" and "),a("code",[e._v("Math.log10(x)")]),e._v(" enter the game. "),a("em",[e._v("Last two functions, '2' and '10', exist because they are often used")]),e._v(". But you can also implement your own logarithm function, for example, "),a("em",[e._v("log3")]),e._v(" or "),a("em",[e._v("log24")]),e._v(". Just use "),a("code",[e._v("Math.log(x) / Math.log(otherBase)")]),e._v(" to achieve this effect.")]),e._v(" "),a("math-log"),e._v(" "),a("h2",{attrs:{id:"trigonometry"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#trigonometry"}},[e._v("#")]),e._v(" Trigonometry")]),e._v(" "),a("p",[e._v("Well, we're at the very end. Trust me! But ♂ass♂ well it's the hardest part in a school math because you need to remember a lot of functions and values they consume and produce. The good news about JS are... you don't need to remember the values.")]),e._v(" "),a("p",[e._v("Good news end at this step. At this paragraph.")]),e._v(" "),a("p",[e._v("Firstly, you still need to remember the list of functions to call. It is quite big:")]),e._v(" "),a("ul",[a("li",[a("code",[e._v("Math.sin(x)")])]),e._v(" "),a("li",[a("code",[e._v("Math.cos(x)")])]),e._v(" "),a("li",[a("code",[e._v("Math.tan(x)")])]),e._v(" "),a("li",[a("code",[e._v("Math.asin(x)")])]),e._v(" "),a("li",[a("code",[e._v("Math.acos(x)")])]),e._v(" "),a("li",[a("code",[e._v("Math.atan(x)")])]),e._v(" "),a("li",[a("code",[e._v("Math.atan2(x, y)")]),e._v(" - "),a("em",[e._v("oh my, second arctangent")]),e._v(". Well, it returns the angle in the plane (in radians) between the positive x-axis and the ray from (0,0) to the point (x,y), for Math.atan2(y,x). You may better understang it with this image:")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Math/atan2/atan2.png",alt:"Atan2 image",title:"Atan2 image"}})]),e._v(" "),a("p",[e._v("Secondly, you need to remember that x represents an angle not in degrees, but in radians.")]),e._v(" "),a("math-trigonometry"),e._v(" "),a("h2",{attrs:{id:"sources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#sources"}},[e._v("#")]),e._v(" Sources")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Learn/JavaScript/First_steps/Math",target:"_blank",rel:"noopener noreferrer"}},[e._v("Math article"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://javascript.info/operators",target:"_blank",rel:"noopener noreferrer"}},[e._v("Operators article"),a("OutboundLink")],1)]),e._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Documentation of everything standard in js"),a("OutboundLink")],1)])])],1)}),[],!1,null,null,null);t.default=s.exports}}]);